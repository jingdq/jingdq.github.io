<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My technical gallery</title>
    <description>Android Developer Gallery</description>
    <link>http://jingdq.github.io</link>
    <atom:link href="http://jingdq.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Android 窗口开发系列:实现一个简单的引导view</title>
        <description>&lt;p&gt;最近事情比较多，没精力抽时间写点东西了，不得不承认自己是个低产的coder,好了，废话不多说，今天跟大家实现一个小的功能，主要用来引导用户进行界面操作的目的。先来看看咱们要做的东西吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/guideview.gif&quot; alt=&quot;GuideView&quot; title=&quot;GuideView&quot;&gt; &lt;/p&gt;

&lt;p&gt;看到效果大家觉得这个东西so easy ! 应该就是在当前视图做一个浮层，然后将其添加一个动画就OK了。的确是这样的，但是我们要在每个界面都添加这个引导操作的功能，如果因为这个功能对每个界面的布局做改动那工作量就大大的上升了，这个时候我们该怎么办呢？ 片刻思考之后，我们应该想到把这个东西封装成一个控件之类的东东，然后在BaseActivity里面去调用。顺着这个思路，我们新建一个GuideView的类，这个类里面主要封装了针对窗口的一些操作，然后结合属性动画来实现上面效果。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    public class GuideView {

        private Context mContext;
        private View forGuideView;
        private FrameLayout mParentView;
        private ImageView pressView;
        private WindowManager wm;
        private WindowManager.LayoutParams mParams;
        private FrameLayout.LayoutParams fl;

        static final int FLIP_DISTANCE = 300;

        public GuideView(Context context, View view) {

            this.mContext = context;
            this.forGuideView = view;
            initWindowParam(context);
            initView();

        }


        public void showView() {
            wm.addView(mParentView, mParams);
            ObjectAnimator oa = ObjectAnimator.ofFloat(mParentView, &amp;quot;translationY&amp;quot;, 0, -FLIP_DISTANCE);
            oa.setDuration(2000);
            oa.setRepeatCount(ValueAnimator.INFINITE);
            oa.setRepeatMode(ValueAnimator.REVERSE);
            oa.start();


        }

        private void initView() {

            int x = (int) forGuideView.getX();
            int y = (int) forGuideView.getY();
            int viewWidth = forGuideView.getWidth();
            int viewHeight = forGuideView.getHeight();
            mParentView = new FrameLayout(mContext);

            mParentView.setBackgroundColor(mContext.getResources().getColor(R.color.transparent));
            pressView = new ImageView(mContext);
            pressView.setBackgroundResource(R.drawable.press);

            fl = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT);

            int marginLeft = (x + (int) (viewWidth / 2.0)) - (int) (pressView.getWidth() / 2.0);
            int marginTop = (y + (int) (viewHeight / 2.0) + FLIP_DISTANCE);

            fl.setMargins(marginLeft, marginTop, 0, 0);


            mParentView.addView(pressView, fl);


        }

        private void initWindowParam(Context context) {

            wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
            mParams = new WindowManager.LayoutParams();
            mParams.format = PixelFormat.TRANSLUCENT;
            mParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;// 焦点
            mParams.width = WindowManager.LayoutParams.FILL_PARENT;//窗口的宽和高
            mParams.height = WindowManager.LayoutParams.FILL_PARENT;
            mParams.type = WindowManager.LayoutParams.TYPE_PHONE;
            mParams.format = 1;
            mParams.gravity = Gravity.TOP;

        }

        public void removeView() {
            pressView.clearAnimation();
            wm.removeViewImmediate(mParentView);


        }


    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个类提供了两个方法showGuideView和removeView，相信大家根据字面含义就知道用途了。紧接着就是在我们的BaseActivity基类里面提供使用的方法：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    public class BaseActivity extends AppCompatActivity {

        GuideView guideView;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_base);
        }



        protected void showGuideView(View view) {

            guideView = new GuideView(this, view);
            guideView.showView();
         }

          @Override
        protected void onPause() {
            super.onPause();

            if (guideView != null) {
                guideView.removeView();
                guideView = null;

            }


        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后再具体的界面对应得Activity中使用&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    public class RegisterActivity extends BaseActivity {

                Button btn_regist_ok;

                @Override
                protected void onCreate(Bundle savedInstanceState) {

                    super.onCreate(savedInstanceState);
                    setContentView(R.layout.activity_register);
                    setTitle(&amp;quot;注册&amp;quot;);
                    btn_regist_ok = (Button) findViewById(R.id.btn_regist_ok);




                }


                @Override
                protected void onResume() {
                    super.onResume();
                    btn_regist_ok.post(new Runnable() {
                    @Override
                    public void run() {
                        showGuideView(btn_regist_ok);


                    }
                });


                }


                }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意&lt;/em&gt;&lt;/strong&gt; OnPause方法中要移除当前界面的guideview,否在这个view会始终在窗口中存在。  最后别忘了在Manifest文件中配置添加窗口的权限&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.SYSTEM_ALERT_WINDOW&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过上述操作基本上实现我们的需求了，是不是很easy?&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;功能简单并不代表实现起来就很轻松，上面仅仅是大致实现了功能，还有一些东西没有考虑到，比如：当前界面存在Dialog弹框的时候这个引导的功能是不是正常，还有高版本API Level 23 下面会不会出现问题等等，后续系列文章会完善这些问题。欢迎大家拍砖,send to &lt;a href=&quot;mailto:dongqij@gmail.com&quot;&gt;dongqij@gmail.com&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://jingdq.github.io/Android_Window_GuideView/</link>
        <guid isPermaLink="true">http://jingdq.github.io/Android_Window_GuideView/</guid>
      </item>
    
      <item>
        <title>Android MVP:如何更好的组织表现层</title>
        <description>&lt;p&gt;首先声明一下这是篇译文 ，再次声明下本人的英文水平&lt;strong&gt;&lt;em&gt;很烂&lt;/em&gt;&lt;/strong&gt;，翻译不正确的地方欢迎拍砖。 文章&lt;a href=&quot;http://antonioleiva.com/mvp-android/&quot;&gt;来源&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;MVP(模型 视图 表现)模式 是众所周知的MVC的衍生物，这段时间在Android应用程序开发中越来越重要，越来越多的人讨论它，但是缺乏可靠性和结构性，这正是这个博客产生的原因，尽可能用更好的方式将我的知识应用到我们的项目开发中。&lt;/p&gt;

&lt;h2&gt;什么是MVP?&lt;/h2&gt;

&lt;p&gt;MVP将逻辑抽取为表示层。将屏幕上的操作与背后具体的业务分离，换句话说就是将视图与业务分离。理想情况下，MVP模式能够做到相同的业务层与完全不同的视图联系。&lt;/p&gt;

&lt;h2&gt;为什么使用MVP?&lt;/h2&gt;

&lt;p&gt;在Android中我们面临的问题来自于在Activity中视图与业务的紧密耦合。比如CursorAdapter ，混合了adapters 和 cursors ，adapter属于视图部分，而cursor属于数据访问部分。如何做到易于扩展与维护的应用程序，我们最好做到合适的分层，所以我们要重构视图层。MVP使我们的view更加独立与数据。我们分离应用程序为至少三层，便于分别独立的测试，在mvp模式下，我们从Activity中分离大部分业务逻辑，方便我们使用测试框架针对这些业务逻辑测试。&lt;/p&gt;

&lt;h2&gt;在Android中如何实现MVP模式？&lt;/h2&gt;

&lt;p&gt;有很多版本mvp模式，每个人都可以根据需求调整它，导致模式的不同主要在于我们表现层代理的职责。比如在view层负责progress bar的显示与隐藏,还是在表示层负责它的显示，谁来控制Action Bar的动作？ 这就是我们要讨论的地方，我将要展示我通常的做法，这篇文章只是指导如何使用mvp模式，然而mvp并没有标准方式。&lt;/p&gt;

&lt;h2&gt;表现层&lt;/h2&gt;

&lt;p&gt;表现层作为视图层和模型层的中介者，从模型层获取数据，经过处理传送给视图层，有别于MVC,你在视图层的操作决定一切。&lt;/p&gt;

&lt;h2&gt;视图层&lt;/h2&gt;

&lt;p&gt;视图层通常是一个Activity,或者 一个Fragment、一个View,包含presenter的引用，可以使用Dragger注入到视图层，否则你就负责在视图层创建presenter对象，当一个视图动作比如按钮点击发生的时候，只需要调用presenter中的方法。&lt;/p&gt;

&lt;h2&gt;模型层&lt;/h2&gt;

&lt;p&gt;在一个良好的分层架构的应用中，模型层是领域层或者业务层的唯一入口，如果我们使用Bob大叔的简洁架构，模型层是用例的交互器，将来再讨论这个话题。现在只需要知道模型层是提供视图层数据的数据源。&lt;/p&gt;

&lt;p&gt;一阵啰嗦之后，我创建了一个&lt;a href=&quot;https://github.com/antoniolg/androidmvp&quot;&gt;mvp的例子&lt;/a&gt;，包含了一个登陆页，来用验证录入数据和控制访问home列表页，这个文章不再讲解代码因为项目比较简单，但是如果你理解比较困难我有可能在写一篇文章详细讲解。&lt;/p&gt;

&lt;h2&gt;结尾&lt;/h2&gt;

&lt;p&gt;在Android中分离逻辑层不容易，但是mvp模式可以使我们的activity不再臃肿，能够更好的组织我们的代码，便于维护和扩展。&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://jingdq.github.io/Android_MVP/</link>
        <guid isPermaLink="true">http://jingdq.github.io/Android_MVP/</guid>
      </item>
    
      <item>
        <title>Android 自定义布局</title>
        <description>&lt;p&gt;首先声明一下这是篇译文 ，再次声明下本人的英文水平&lt;strong&gt;&lt;em&gt;很烂&lt;/em&gt;&lt;/strong&gt;，翻译不正确的地方欢迎拍砖。 文章&lt;a href=&quot;http://lucasr.org/2014/05/12/custom-layouts-on-android/&quot;&gt;来源&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/android_post/custom_layout/layouts-post.png&quot; alt=&quot;customlayout&quot;&gt;&lt;/p&gt;

&lt;p&gt;如果你之前建立过android应用程序，你只是使用平台一些内置的可用布局比如 RelativeLayout、LinearLayout、FrameLayout等，对于android界面而言，这些是我们构建程序的面包和黄油。
通过组合内置的布局，可以实现复杂的用户界面，但是，仍然会在某些情况下需要我们实现自定义布局。有两种原因自定义布局，第一，使UI控件更加高效,减少view的数量或者更快的遍历布局。第二，使用内置的控件不能自然地实现界面需求。在这片文章中，我将演示四种方式实现自定义布局，讨论它们各自的优点和缺点：composite view，custom composite view, flat custom view,  async custom views。
这是代码示例&lt;a href=&quot;https://github.com/lucasr/android-layout-samples&quot;&gt;android-layout-samples&lt;/a&gt;,这个例子采用了不同的技术实现了相同的UI, 这个例子使用Picasso来加载图片。UI是twitter app的简单版本，没有交互，只是简单的布局。&lt;/p&gt;

&lt;p&gt;ok,让我们开始最通用的自定义方式：composite view。&lt;/p&gt;

&lt;h2&gt;Composite View&lt;/h2&gt;

&lt;p&gt;通过结合多个view组成一个可复用的UI组件，这是最简单的方式，当然也非常容易实现：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;集成内置的布局类。&lt;/li&gt;
&lt;li&gt;在构造方法加载一个merge layout。&lt;/li&gt;
&lt;li&gt;通过findViewById()初始化内部的成员view。&lt;/li&gt;
&lt;li&gt;添加查询和更改view状态的方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TweetCompositeViewcode 就是这么一个组合的view,它继承自RelativeLayout,加载tweet&lt;em&gt;composite&lt;/em&gt;layout.xml，提供了update()方法用于刷新view的状态。so,简单地干活。&lt;/p&gt;

&lt;h2&gt;Custom Composite View&lt;/h2&gt;

&lt;p&gt;大多数的情况下 TweetCompositeView 执行的相当好，但是，为了方便讨论，假设你想要减少子view的数量和使布局的遍历更加高效。虽然composite views容易实现,但是使用这些通用的布局有不少的性能开销，特别像LinearLayout 和 RelativeLayout实现复杂布局的情况下。在一次遍历的过程中肯能会测量子view多次。LinearLayout的layout_wight就是常见的例子。&lt;/p&gt;

&lt;p&gt;很高兴，发现这篇文章已经有人翻译过了，而且翻译的挺好的，&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0112/2300.html&quot;&gt;看这里&lt;/a&gt; 。&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://jingdq.github.io/Android_CustomLayout/</link>
        <guid isPermaLink="true">http://jingdq.github.io/Android_CustomLayout/</guid>
      </item>
    
      <item>
        <title>Android 问题探索</title>
        <description>&lt;p&gt;Android开发常见问题，不断更新中......&lt;/p&gt;

&lt;h2&gt;Android消息处理相关问题&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在handler的post方法中设置一个执行较长任务的Runable对象（称为任务A），然后再这段代码 &lt;strong&gt;&lt;em&gt;之后&lt;/em&gt;&lt;/strong&gt; 同样执行一段任务代码（称为任务B），请问那个任务先执行？并解释原因。
例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    mHandler.post(new Runnable() {
        @Override
        public void run() {

            try {
                for (int i = 0; i &amp;lt; 100; i++) {
                    Thread.sleep(1000);
                    Log.i(&amp;quot;xxx&amp;quot;, Thread.currentThread() + &amp;quot; i : &amp;quot; + i);

                }

            } catch (InterruptedException e) {
                e.printStackTrace();
            }

        }
    });
    try {
        for (int i = 0; i &amp;lt; 100; i++) {
            Thread.sleep(1000);
            Log.i(&amp;quot;xxx&amp;quot;, Thread.currentThread() + &amp;quot; j : &amp;quot; + i);

        }

    } catch (InterruptedException e) {
        e.printStackTrace();
    }

  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;衍生问题：
1.post方法的参数Runnable运行在哪个线程中，这个方法没有提供delay参数是不是立即运行？
2.底层是怎么样的处理机制？
3.Runnable 中的任务跟主线程的任务是异步执行的么？&lt;/p&gt;

&lt;h2&gt;Android Service相关问题&lt;/h2&gt;

&lt;p&gt;1.能够多次启动同一个服务么？能够多次绑定同一个服务么？在启动一个服务的同时能够绑定它么？多次绑定一个服务，如果中断某个绑定，其他绑定者会是什么状态？&lt;/p&gt;

&lt;h2&gt;Android IPC相关问题&lt;/h2&gt;

&lt;h2&gt;Android View 以及自定义View 、View事件相关问题&lt;/h2&gt;

&lt;h2&gt;Android数据持久化问题&lt;/h2&gt;

&lt;h2&gt;Android 网络通信问题&lt;/h2&gt;

&lt;h2&gt;Android 性能优化问题&lt;/h2&gt;

&lt;h2&gt;Anroid 安全性问题&lt;/h2&gt;

&lt;p&gt;1.假设你在一个团队中处于一个主程的角色，你要写一个公共的库供同事使用，你实现了一些基础功能并且打了jar包，怎么保护这些jar包代码的安全？&lt;/p&gt;

&lt;h2&gt;Android 界面以及版本适配问题&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;在Activity声明周期方法中的OnResume能够获取View控件的位置坐标信息么？当一个Activity完全加载完毕后 会执行 onWindowFocusChanged方法，在这里能够获取View控件的位置坐标信息么？&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 10 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://jingdq.github.io/Android_Question/</link>
        <guid isPermaLink="true">http://jingdq.github.io/Android_Question/</guid>
      </item>
    
      <item>
        <title>Android Technical Aspects</title>
        <description>&lt;p&gt;技术汇总，不断完善中......&lt;/p&gt;

&lt;h2&gt;Android方面的&lt;/h2&gt;

&lt;h3&gt;架构&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://hannesdorfmann.com/android/mosby/&quot;&gt;TED MoSBY mvp的实现库  &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/&quot;&gt;用简洁的办法架构Android程序&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/&quot;&gt;Android架构演化之路&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@cainwong/android-mvp-an-alternate-approach-1a2b02108f7a#.neqnts62u&quot;&gt;一种在Android中实现mvp模式的新思路 &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3&gt;动态加载&amp;amp;&amp;amp;HotFix&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;amp;mid=400118620&amp;amp;idx=1&amp;amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;amp;scene=25#wechat_redirect&quot;&gt;安卓App热补丁动态修复技术介绍&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMTcwNTE0NA==&amp;amp;mid=400326703&amp;amp;idx=1&amp;amp;sn=23f689e24a2a37853fbe601ce9ef800b&amp;amp;scene=0#wechat_redirect&quot;&gt;再议携程Android动态加载框架DynamicAPK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/49883661&quot;&gt;Android热补丁动态修复框架小结&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://lirenlong.github.io/hotfix/#rd?sukey=fc78a68049a14bb2b122280ebdec7b39605209290860f5335634251c8fde8b4b7748618df85e7db8417f92b1536d83fe&quot;&gt;Android App 线上热修复方案 天猫技术&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;http://blog.zhaiyifan.cn/2015/11/20/HotPatchCompare/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;各大热补丁方案分析和比较&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;自定义view案例&lt;/h3&gt;

&lt;h4&gt;继承 view 重写draw方式&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/tianjian4592/article/details/44538605&quot;&gt;一个绚丽的loading动效分析与实现&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/leafloadingview.gif&quot; alt=&quot;leafloadingview&quot; title=&quot;leafloadingview&quot;&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;继承 ViewGroup 方式&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/43131133&quot;&gt;Android 打造炫目的圆形菜单 秒秒钟高仿建行圆形菜单&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/jh.gif&quot; alt=&quot;jhview&quot; title=&quot;jhview&quot;&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/38352503&quot;&gt;FlowLayout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flowlayout.jpeg&quot; alt=&quot;flowlayout&quot; title=&quot;flowlayout&quot;&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;继承已有的控件&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/39257409&quot;&gt;Android 高仿 QQ5.0 侧滑菜单效果 自定义控件来袭&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3&gt;屏幕适配&amp;amp;&amp;amp;版本适配&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/49990941&quot;&gt;Android AutoLayout全新的适配方式 堪称适配终结者&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3&gt;主题样式&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://www.hidroh.com/2015/02/16/support-multiple-themes-android-app/&quot;&gt;Supporting multiple themes in your Android app&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3&gt;编译工具&lt;/h3&gt;

&lt;hr&gt;

&lt;h2&gt;干货文章&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/amfe/article/issues/11&quot;&gt;15年双11手淘前端技术巡演&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;中国技术力量系列文章&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=400995270&amp;amp;idx=1&amp;amp;sn=5b090490896f95b061a3ccd86baa3274&amp;amp;scene=1&amp;amp;srcid=1119mZSvN34bQPpsbUAdJxVG&amp;amp;key=d72a47206eca0ea9a079092ac4160e128b43889e67ae9ecddaa63de5821106c2eed3f483dcb44b0627ee921aad527deb&amp;amp;ascene=0&amp;amp;uin=MTE1NjEyMDk2MA%3D%3D&amp;amp;devicetype=iMac+MacBookPro9%2C2+OSX+OSX+10.11.1+build(15B42)&amp;amp;version=11020201&amp;amp;pass_ticket=VMULx2IXHdhtqBM7a3LaMyVGmmEfa84BQxPV6%2FzTPABG2SXGuGAGuMpg2uLw%2F3Wv&quot;&gt;阿里无线总监南天硅谷谈手淘技术架构演进细节&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=400805032&amp;amp;idx=1&amp;amp;sn=08b6948f26846329d4f7bfaedd2f1c18&amp;amp;scene=21#wechat_redirect&quot;&gt;腾讯技术十七年&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=400284628&amp;amp;idx=2&amp;amp;sn=e376a90a338e65fec50cb32922e19093&amp;amp;scene=21#wechat_redirect&quot;&gt;阿里技术崛起之路&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Android项目重构之路系列&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://android.jobbole.com/82083/&quot;&gt;实现篇&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://android.jobbole.com/82076/&quot;&gt;架构篇&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://android.jobbole.com/82080/&quot;&gt;界面篇&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;A useful stack on android&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://saulmm.github.io/2015/02/02/A%20useful%20stack%20on%20android%20%231,%20architecture/&quot;&gt;architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://saulmm.github.io/a-useful-stack-on-android-2-user-interface/&quot;&gt;user-interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://saulmm.github.io/a-useful-stack-on-android-3-compatibility/&quot;&gt;compatibility&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;ReactiveX &amp;amp;&amp;amp; RxJava&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot;&gt;给 Android 开发者的 RxJava 详解 作者经验分享 值得拜读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/index.html&quot;&gt;ReactiveX文档中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;性能优化系列&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://android.jobbole.com/81944/&quot;&gt;给 App 提速：Android 性能优化总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.devtf.cn/?p=1097&quot;&gt;加速你的Android应用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLOU2XLYxmsIKEOXh5TwZEv89aofHzNCiu&quot;&gt;Android Performance Patterns 需翻墙&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.kuqin.com/shuoit/20150928/348295.html&quot;&gt;Android性能调优利器StrictMode&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;React Native&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://wiki.jikexueyuan.com/project/react-native/?hmsr=weixin_wiki_1124#rd&amp;amp;sukey=fc78a68049a14bb2da2f1223ce6e476b8bf98a7d79530bca29e3b19024872cb7cc75328e45f5c94f43e72f84da3bd2ff&quot;&gt;React Native 官方文档中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Android开发兵器库&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://toutiao.io/subjects/11740&quot;&gt;头条 天盟&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.csdn.net/article/2014-06-16/2820224-top-5-android-libraries&quot;&gt;Android开发者必知的5个开源库&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;硬技能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.devtf.cn/?p=1079&quot;&gt;30分钟搭建一个android的私有Maven仓库&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.judymax.com/archives/1087&quot;&gt;Android 6.0 源代码编译实践&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;面试资料&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MzE4MjgyMw==&amp;amp;mid=400574044&amp;amp;idx=1&amp;amp;sn=d5ffc7d3f214c11fefbcd82eb6c73f91&amp;amp;scene=0#wechat_redirect&quot;&gt;程序员不得不知道的技术面试资料大全&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://hit-alibaba.github.io/interview/index.html&quot;&gt;笔试面试知识整理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/&quot;&gt;LeetCode&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.usfca.edu/%7Egalles/visualization/Algorithms.html&quot;&gt;Data Structure Visualizations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.nowcoder.com/&quot;&gt;牛客网&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 09 Nov 2015 17:40:32 +0800</pubDate>
        <link>http://jingdq.github.io/Android_Technical_-Aspects/</link>
        <guid isPermaLink="true">http://jingdq.github.io/Android_Technical_-Aspects/</guid>
      </item>
    
      <item>
        <title>Android 资源汇总</title>
        <description>&lt;p&gt;整理搜集的书签，主要是一些优秀的blog和干货网站。排名不分先后，只是按照书签的收藏顺序整理的。不断更新中......&lt;/p&gt;

&lt;h3&gt;团体博客&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://club.alibabatech.org/&quot;&gt;阿里技术沙龙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://tech.meituan.com/&quot;&gt;美团技术博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/&quot;&gt;IBM developerworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://www.alloyteam.com/&quot;&gt;腾讯 AlloyTeam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://blog.csdn.net/mobile/newest.html&quot;&gt;CSDN 移动开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://futurice.com/blog/&quot;&gt;Futurice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://android-developers.blogspot.hk/&quot;&gt;Android Developers Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://engineering.meetme.com/&quot;&gt;MeetMe&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;个人博客&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://jakewharton.com/blog&quot;&gt;jakewharton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://frogermcs.github.io/&quot;&gt;froger_mcs dev blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://www.trinea.cn/&quot;&gt;Trinea 源码分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://hukai.me/&quot;&gt;胡凯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://codethink.me/&quot;&gt;CodeThink 小米Android工程师&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://hannesdorfmann.com/&quot;&gt;Hannes Doorfmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://blog.csdn.net/innost&quot;&gt;邓凡平老师深入理解Android卷系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://blog.csdn.net/lmj623565791&quot;&gt;鸿洋大牛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://blog.csdn.net/singwhatiwanna&quot;&gt;任玉刚 android开发艺术探索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog&quot;&gt;郭神的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/asce1885&quot;&gt;ASCE1885大牛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://antonioleiva.com/&quot;&gt;antonioleiva&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fernandocejas.com&quot;&gt;Fernaado Cejas 一些比较新的技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lucasr.org/&quot;&gt;Lucas Fackbook android工程师&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kymjs.com/&quot;&gt;张涛 无论何时，请保持学者的谦逊与宽容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jiajixin.cn/&quot;&gt;Jason&amp;#39;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.oyanglul.us/index.html&quot;&gt;Jichao Ouyang&amp;#39;s Blog 前端达人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amfe/article&quot;&gt;amfe Ali前端达人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.curious-creature.com/&quot;&gt;Romain Guy Android Performance Case Study Follow-up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pguardiola.com/blog/&quot;&gt;Pablo Guardiola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mindhacks.cn/&quot;&gt;刘未鹏 Mind Hacks 思维改变生活&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.caoqq.net/&quot;&gt;曹庆庆 海外留学生 进击的牛人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot;&gt;阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coolshell.cn/&quot;&gt;刘皓的酷壳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.udinic.com/&quot;&gt;Udi Cohen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zhaokaiqiang1992?viewmode=contents&quot;&gt;赵凯强 凯子哥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.judymax.com/&quot;&gt;Maxiee 江南大学硕士生&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h2&gt;网站资源&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;http://mirrors.segmentfault.com/adchs/index.html&quot;&gt;Android Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://www.androidbegin.com/&quot;&gt;Android Begin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://5020.tk/&quot;&gt;AndroidDevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://androidcustomviews.com/&quot;&gt;AndroidCustomView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://www.google.com/design/spec/material-design/introduction.html#&quot;&gt;Material design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://www.jcodecraeer.com/&quot;&gt;泡在网上的日子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://www.23code.com/&quot;&gt;Android 经典开源代码分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;http://hukai.me/android-training-course-in-chinese/index.html&quot;&gt;Android官方培训课程中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://android-arsenal.com/&quot;&gt;Android developer portal with tools, libraries, and apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.android-gems.com/&quot;&gt;android gems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jobui.com/mianshiti/it/android/&quot;&gt;职友集-Android面试题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mianwww.com/html/category/it-interview/android&quot;&gt;IT公司面试手册-Android面试笔试题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javacodegeeks.com&quot;&gt;Java Code Geeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://objccn.io&quot;&gt;objc中国&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com&quot;&gt;jobbole伯乐在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://toutiao.io/&quot;&gt;开发者头条&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com&quot;&gt;简书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html-js.com/&quot;&gt;前端技术网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn&quot;&gt;InfoQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dataguru.cn/&quot;&gt;练数成金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.devtf.cn/&quot;&gt;开发者技术前线&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Github&lt;/h2&gt;

&lt;h3&gt;Group&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/alibaba&quot;&gt;Alibaba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/trello&quot;&gt;trello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/square&quot;&gt;square&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/facebook&quot;&gt;facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/google&quot;&gt;google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/aosp-exchange-group&quot;&gt;codekk&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Personal&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/fedepaol?tab=repositories&quot;&gt;fedepaol&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;微信公众号&lt;/h2&gt;

&lt;h2&gt;Weibo&lt;/h2&gt;
</description>
        <pubDate>Mon, 09 Nov 2015 17:40:32 +0800</pubDate>
        <link>http://jingdq.github.io/Android_Source/</link>
        <guid isPermaLink="true">http://jingdq.github.io/Android_Source/</guid>
      </item>
    
  </channel>
</rss>